from aiogram import Router, types, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from keyboards import replykeyboards as reply
from database import requests as rq


router = Router()

class Process(StatesGroup):
    name = State()
    number = State()
    question = State()


@router.message(CommandStart())
async def start(message: types.Message):
    await message.answer(text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ü§ó", reply_markup=reply.rkb)


@router.message(F.text == "‚úç –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def reg(message: types.Message, state: FSMContext):
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
    await state.set_state(Process.name)


@router.message(Process.name)
async def set_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –¥–∞—Ç—å –Ω–∞–º –Ω–æ–º–µ—Ä –í–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏", reply_markup=reply.rkb_contact)
    await state.set_state(Process.number)
    await rq.add_user(message.from_user.id)


@router.message(F.text == "–ù–∞–∑–∞–¥")
async def to_back(message: types.Message):
    await message.answer(text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ü§ó", reply_markup=reply.rkb)


@router.message(Process.number)
async def set_number(message: types.Message, state: FSMContext):
    if message.contact:
        await state.update_data(number=int(message.contact.phone_number[1:]))
        await message.answer(text="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å")
        await state.set_state(Process.question)
    else:
        await message.answer("–í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –ø–æ–∫–∞ –Ω–µ –¥–∞–¥–∏—Ç–µ –Ω–∞–º –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã üò´", reply_markup=reply.rkb_contact)
        await state.clear()


@router.message(Process.question)
async def set_question(message: types.Message, state: FSMContext):
    await state.update_data(question=message.text)
    await message.answer(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω! üòã")
    await state.clear()