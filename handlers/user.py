from aiogram import Router, types, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from keyboards import kb as reply
from database import requests as rq
from aiogram.types import ReplyKeyboardRemove


router = Router()

class Process(StatesGroup):
    name = State()
    number = State()
    question = State()


@router.message(CommandStart())
async def start(message: types.Message):
    user = await rq.add_user(message.from_user.id)
    if not user:
        await message.answer(text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ü§ó", 
        reply_markup=reply.rkb)
    else:
        await message.answer(text="–û—Ç–ø–∞—Ä–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ")


@router.message(F.text == "‚úç –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def reg(message: types.Message, state: FSMContext):
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Process.name)


@router.message(Process.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –¥–∞—Ç—å –Ω–∞–º –Ω–æ–º–µ—Ä –í–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏", 
    reply_markup=reply.rkb_contact)
    await state.set_state(Process.number)


@router.message(F.text == "–ù–∞–∑–∞–¥")
async def to_back(message: types.Message):
    await message.answer(text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ü§ó", 
    reply_markup=reply.rkb)


@router.message(Process.number, F.contact)
async def get_number(message: types.Message, state: FSMContext):
    await state.update_data(number=int(message.contact.phone_number[1:]))
    await message.answer(text="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Process.question)


@router.message(Process.question)
async def get_question(message: types.Message, state: FSMContext):
    user = await state.get_data()
    await rq.edit_user(message.from_user.id, user['name'], user['number'], message.from_user.username)
    await rq.add_ticket(message.from_user.id, message.text)
    await message.answer("–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ, —Å–ø–∞—Å–∏–±–æ ‚ò∫")
    await state.clear()